// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int         @id @default(autoincrement())
  firstName     String?
  lastName      String?
  dateOfBirth   DateTime?
  gender        String?
  phoneNumber   String?
  email         String?     @unique
  emailVerified DateTime?
  password      String?
  street        String?
  city          String?
  state         String?
  zipCode       String?
  height        Decimal?
  weight        Decimal?
  image         String?
  accounts      Account[]
  sessions      Session[]
  roles         Role[] // Added relationship to roles
  UserRoles     UserRoles[]

  @@map("users")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id     Int         @id @default(autoincrement())
  name   String      @unique
  users  UserRoles[] // Added relationship to users
  User   User?       @relation(fields: [userId], references: [id])
  userId Int?
}

model UserRoles {
  user_id Int
  role_id Int

  user User @relation(fields: [user_id], references: [id])
  role Role @relation(fields: [role_id], references: [id])

  @@id([user_id, role_id])
}
