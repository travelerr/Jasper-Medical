// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Auth

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id          Int       @id @default(autoincrement())
  createdDate DateTime? @default(now())
  updatedDate DateTime? @updatedAt
  name        String?
  username    String
  email       String    @unique
  password    String
  image       String?
  sessions    Session[]
  role        UserRole  @default(PATIENT)
  doctor      Doctor?
  patient     Patient?
  admin       Admin?
  doctorId    Int?
  patientId   Int?
  adminId     Int?
}

// Doctor

model Doctor {
  id           Int           @id @default(autoincrement())
  createdDate  DateTime?     @default(now())
  updatedDate  DateTime?     @updatedAt
  name         String?
  firstName    String?
  lastName     String?
  appointments Appointment[]
  user         User          @relation(fields: [userId], references: [id])
  userId       Int           @unique
  specialty    String
}

// Patient 

model Patient {
  id              Int               @id @default(autoincrement())
  createdDate     DateTime?         @default(now())
  updatedDate     DateTime?         @updatedAt
  name            String?
  firstName       String?
  middleName      String?
  lastName        String?
  status          PatientStatus?    @default(Active)
  suffix          NameSuffix?
  altName         String?
  dob             DateTime?
  sexAtBirth      Sex?
  gender          Gender?
  ssn             String?
  maidenName      String?
  genderMarker    GenderMarker?
  pronouns        Pronouns?
  race            Race?
  ethnicity       Ethnicity?
  contact         Contact?
  insurance       Insurance?
  provider        Provider?
  patientHistory  PatientHistory?
  allergy         Allergy[]
  problemList     ProblemList[]
  appointments    Appointment[] // Establish a one-to-many relationship w Consult
  consults        Consult[]
  testResults     TestResult[]
  drugIntolerance DrugIntolerance[]
  user            User              @relation(fields: [userId], references: [id])
  userId          Int               @unique
}

model Consult {
  id          Int       @id @default(autoincrement())
  createdDate DateTime? @default(now())
  updatedDate DateTime? @updatedAt
  name        String?
  date        DateTime
  notes       String
  patientId   Int // Foreign key reference to the Patient model
  patient     Patient   @relation(fields: [patientId], references: [id])
}

model TestResult {
  id          Int       @id @default(autoincrement())
  createdDate DateTime? @default(now())
  updatedDate DateTime? @updatedAt
  name        String?
  date        DateTime
  notes       String
  patientId   Int // Foreign key reference to the Patient model
  patient     Patient   @relation(fields: [patientId], references: [id])
}

model Contact {
  id                Int             @id @default(autoincrement())
  createdDate       DateTime?       @default(now())
  updatedDate       DateTime?       @updatedAt
  name              String?
  primaryPhone      String?
  primaryType       PhoneType?      @default(Mobile)
  secondaryPhone    String?
  secondaryType     PhoneType?      @default(Home)
  street            String?
  apt               String?
  city              String?
  state             State?
  zip               String?
  pharmacy          String?
  secondaryPharmacy String?
  secondaryStreet   String?
  secondaryApt      String?
  secondaryCity     String?
  secondaryState    State?
  secondaryZip      String?
  ecFirstName       String?
  ecLastName        String?
  ecRelationship    ECRelationship?
  ecPhone           String?
  ecStreet          String?
  ecApt             String?
  ecCity            String?
  ecState           State?
  ecZip             String?
  patientId         Int             @unique // Foreign key reference to the Patient model
  patient           Patient         @relation(fields: [patientId], references: [id])
}

model Insurance {
  id                      Int            @id @default(autoincrement())
  createdDate             DateTime?      @default(now())
  updatedDate             DateTime?      @updatedAt
  name                    String?
  cardImageFront          String?
  cardImageBack           String?
  insuanceName            String?
  planName                String?
  groupId                 String?
  memberId                String?
  copay                   Decimal?
  deductible              Decimal?
  effectiveDate           DateTime?
  endDate                 DateTime?
  primaryHolder           PrimaryHolder? @default(Self)
  secondaryCardImageFront String?
  secondaryCardImageBack  String?
  secondaryInsuanceName   String?
  secondaryPlanName       String?
  secondaryGroupId        String?
  secondaryMemberId       String?
  secondaryCopay          Decimal?
  secondaryDeductible     Decimal?
  secondaryEffectiveDate  DateTime?
  secondaryEndDate        DateTime?
  secondaryPrimaryHolder  PrimaryHolder? @default(Self)
  tertiaryCardImageFront  String?
  tertiaryCardImageBack   String?
  tertiaryInsuanceName    String?
  tertiaryPlanName        String?
  tertiaryGroupId         String?
  tertiaryMemberId        String?
  tertiaryCopay           Decimal?
  tertiaryDeductible      Decimal?
  tertiaryEffectiveDate   DateTime?
  tertiaryEndDate         DateTime?
  tertiaryPrimaryHolder   PrimaryHolder? @default(Self)
  patientId               Int            @unique // Foreign key reference to the Patient model
  patient                 Patient        @relation(fields: [patientId], references: [id])
}

model Provider {
  id          Int       @id @default(autoincrement())
  createdDate DateTime? @default(now())
  updatedDate DateTime? @updatedAt
  name        String?
  provider    String?
  pcp         String?
  state       State?
  patientId   Int       @unique // Foreign key reference to the Patient model
  patient     Patient   @relation(fields: [patientId], references: [id])
}

model Allergy {
  id          Int             @id @default(autoincrement())
  createdDate DateTime?       @default(now())
  updatedDate DateTime?       @updatedAt
  name        String?
  reaction    String?
  severity    AllergySeverity
  status      AllergyStatus
  onsetDate   DateTime
  allergen    Allergen[]
  patientId   Int // Foreign key reference to the Patient model
  patient     Patient         @relation(fields: [patientId], references: [id])
}

model Allergen {
  id          Int       @id @default(autoincrement())
  createdDate DateTime? @default(now())
  updatedDate DateTime? @updatedAt
  name        String?
  allergyId   Int // Foreign key reference to the Patient model
  allergy     Allergy   @relation(fields: [allergyId], references: [id])
}

model ProblemList {
  id          Int                    @id @default(autoincrement())
  createdDate DateTime?              @default(now())
  updatedDate DateTime?              @updatedAt
  name        String?
  dxDate      DateTime?
  status      ProblemListStatus      @default(Active)
  synopsis    String?
  patientId   Int // Foreign key reference to the Patient model
  patient     Patient                @relation(fields: [patientId], references: [id])
  icd10Codes  ProblemListICD10Code[]
}

model ICD10Code {
  id               Int                    @id @default(autoincrement())
  createdDate      DateTime?              @default(now())
  updatedDate      DateTime?              @updatedAt
  name             String?
  code             String
  shortDescription String?
  longDescription  String?
  problemLists     ProblemListICD10Code[]
}

model ProblemListICD10Code {
  id            Int @id @default(autoincrement())
  problemListId Int
  icd10CodeId   Int

  problemList ProblemList @relation(fields: [problemListId], references: [id])
  icd10Code   ICD10Code   @relation(fields: [icd10CodeId], references: [id])
}

model DrugIntolerance {
  id          Int                     @id @default(autoincrement())
  createdDate DateTime?               @default(now())
  updatedDate DateTime?               @updatedAt
  name        String?
  reaction    String?
  severity    DrugIntoleranceSeverity
  status      DrugIntoleranceStatus
  onsetDate   DateTime?
  drugId      Int // Foreign key reference to the Drug model
  drug        Drug                    @relation(fields: [drugId], references: [id])
  patientId   Int // Foreign key reference to the Patient model
  patient     Patient                 @relation(fields: [patientId], references: [id])
}

model Drug {
  id                      Int               @id @default(autoincrement())
  createdDate             DateTime?         @default(now())
  updatedDate             DateTime?         @updatedAt
  name                    String?
  ndc                     String
  type                    DrugType
  proprietaryName         String?
  proprietaryNameSuffix   String?
  nonProprietaryName      String?
  dosageFormName          String?
  routeName               String?
  manufacturerName        String?
  substanceName           String?
  activeNumeratorStrength String?
  activeIngredientUnit    String?
  pharmClasses            String?
  deaSchedule             String?
  drugIntolerances        DrugIntolerance[] // Relation to DrugIntolerance
}

model PatientHistory {
  id                           Int                    @id @default(autoincrement())
  patientId                    Int                    @unique // Foreign key reference to the Patient model
  patient                      Patient                @relation(fields: [patientId], references: [id])
  pastMedicalHistory           PastMedicalHistory[]
  pastSurgicalHistory          PastSurgicalHistory[]
  familyHistory                FamilyHistory[]
  socialHistory                SocialHistory[]
  cognitiveStatus              CognitiveStatus[]
  functionalStatus             FunctionalStatus[]
  psychologicalStatus          PsychologicalStatus[]
  habits                       Habits[]
  diet                         Diet[]
  exercise                     Exercise[]
  familyHistoryMother          String?
  familyHistoryFather          String?
  familyHistoryBrother         String?
  familyHistorySister          String?
  familyHistorySon             String?
  familyHistoryDaughter        String?
  familyHistoryGrandmother     String?
  familyHistoryGrandfather     String?
  familyHistoryAunt            String?
  familyHistoryUncle           String?
  familyHistoryOther           String?
  socialHistoryEducation       PatientEducationLevel
  socialHistoryFinancialStrain PatientFinancialStrain
  psychologicalStatusStress    PatientStressLevel
  habitsSmokingStatus          PatientSmokingStatus
  surveyScores                 SurveyScore[]
  surveyResponse               SurveyResponse[]
}

model PastMedicalHistory {
  id               Int            @id @default(autoincrement())
  createdDate      DateTime?      @default(now())
  updatedDate      DateTime?      @updatedAt
  name             String?
  sortOrder        Int?
  note             String?
  patientHistoryId Int // Foreign key reference to the Patient History model
  patientHistory   PatientHistory @relation(fields: [patientHistoryId], references: [id])
}

model PastSurgicalHistory {
  id               Int            @id @default(autoincrement())
  createdDate      DateTime?      @default(now())
  updatedDate      DateTime?      @updatedAt
  name             String?
  sortOrder        Int?
  note             String?
  patientHistoryId Int // Foreign key reference to the Patient History model
  patientHistory   PatientHistory @relation(fields: [patientHistoryId], references: [id])
}

model FamilyHistory {
  id               Int            @id @default(autoincrement())
  createdDate      DateTime?      @default(now())
  updatedDate      DateTime?      @updatedAt
  name             String?
  sortOrder        Int?
  note             String?
  patientHistoryId Int // Foreign key reference to the Patient History model
  patientHistory   PatientHistory @relation(fields: [patientHistoryId], references: [id])
}

model SocialHistory {
  id               Int            @id @default(autoincrement())
  createdDate      DateTime?      @default(now())
  updatedDate      DateTime?      @updatedAt
  name             String?
  sortOrder        Int?
  note             String?
  patientHistoryId Int // Foreign key reference to the Patient History model
  patientHistory   PatientHistory @relation(fields: [patientHistoryId], references: [id])
}

model CognitiveStatus {
  id               Int            @id @default(autoincrement())
  createdDate      DateTime?      @default(now())
  updatedDate      DateTime?      @updatedAt
  name             String?
  sortOrder        Int?
  note             String?
  patientHistoryId Int // Foreign key reference to the Patient History model
  patientHistory   PatientHistory @relation(fields: [patientHistoryId], references: [id])
}

model FunctionalStatus {
  id               Int            @id @default(autoincrement())
  createdDate      DateTime?      @default(now())
  updatedDate      DateTime?      @updatedAt
  name             String?
  sortOrder        Int?
  note             String?
  patientHistoryId Int // Foreign key reference to the Patient History model
  patientHistory   PatientHistory @relation(fields: [patientHistoryId], references: [id])
}

model PsychologicalStatus {
  id               Int            @id @default(autoincrement())
  createdDate      DateTime?      @default(now())
  updatedDate      DateTime?      @updatedAt
  name             String?
  sortOrder        Int?
  note             String?
  patientHistoryId Int // Foreign key reference to the Patient History model
  patientHistory   PatientHistory @relation(fields: [patientHistoryId], references: [id])
}

model Habits {
  id               Int            @id @default(autoincrement())
  createdDate      DateTime?      @default(now())
  updatedDate      DateTime?      @updatedAt
  name             String?
  sortOrder        Int?
  note             String?
  patientHistoryId Int // Foreign key reference to the Patient History model
  patientHistory   PatientHistory @relation(fields: [patientHistoryId], references: [id])
}

model Diet {
  id               Int            @id @default(autoincrement())
  createdDate      DateTime?      @default(now())
  updatedDate      DateTime?      @updatedAt
  name             String?
  sortOrder        Int?
  note             String?
  patientHistoryId Int // Foreign key reference to the Patient History model
  patientHistory   PatientHistory @relation(fields: [patientHistoryId], references: [id])
}

model Exercise {
  id               Int            @id @default(autoincrement())
  createdDate      DateTime?      @default(now())
  updatedDate      DateTime?      @updatedAt
  name             String?
  sortOrder        Int?
  note             String?
  patientHistoryId Int // Foreign key reference to the Patient History model
  patientHistory   PatientHistory @relation(fields: [patientHistoryId], references: [id])
}

model Survey {
  id          Int              @id @default(autoincrement())
  createdDate DateTime?        @default(now())
  updatedDate DateTime?        @updatedAt
  name        String?
  surveyName  SurveyName
  questions   SurveyQuestion[]
  responses   SurveyResponse[]
  SurveyScore SurveyScore[]
}

model SurveyQuestion {
  id             Int                @id @default(autoincrement())
  createdDate    DateTime?          @default(now())
  updatedDate    DateTime?          @updatedAt
  name           String?
  text           String
  sortOrder      Int?
  type           SurveyQuestionType
  surveyId       Int
  survey         Survey             @relation(fields: [surveyId], references: [id])
  SurveyResponse SurveyResponse[]
}

model SurveyResponse {
  id               Int                @id @default(autoincrement())
  createdDate      DateTime?          @default(now())
  updatedDate      DateTime?          @updatedAt
  name             String?
  responseText     String?
  responseInt      Int?
  responseBool     Boolean?
  type             SurveyQuestionType
  questionId       Int
  question         SurveyQuestion     @relation(fields: [questionId], references: [id])
  surveyId         Int
  survey           Survey             @relation(fields: [surveyId], references: [id])
  patientHistoryId Int // Foreign key reference to the Patient History model
  patientHistory   PatientHistory     @relation(fields: [patientHistoryId], references: [id])
}

model SurveyScore {
  id               Int            @id @default(autoincrement())
  createdDate      DateTime?      @default(now())
  updatedDate      DateTime?      @updatedAt
  name             String?
  score            Int // The score from the survey
  surveyName       SurveyName
  surveyId         Int
  survey           Survey         @relation(fields: [surveyId], references: [id])
  patientHistoryId Int // Foreign key reference to the Patient History model
  patientHistory   PatientHistory @relation(fields: [patientHistoryId], references: [id])
}

// Admin

model Admin {
  id          Int      @id @default(autoincrement())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  name        String?
  firstName   String?
  lastName    String?
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @unique
}

// Shared
model Appointment {
  id          Int               @id @default(autoincrement())
  createdDate DateTime?         @default(now())
  updatedDate DateTime?         @updatedAt
  name        String?
  title       String?
  startTime   DateTime
  endTime     DateTime
  details     String
  status      AppointmentStatus
  doctorId    Int
  patientId   Int
  doctor      Doctor            @relation(fields: [doctorId], references: [id])
  patient     Patient           @relation(fields: [patientId], references: [id])
}

enum AppointmentStatus {
  Scheduled
  Cancelled
  Completed
}

enum UserRole {
  DOCTOR
  PATIENT
  ADMIN
}

enum PhoneType {
  Home
  Mobile
  Work
  Other
}

enum State {
  AL
  AK
  AZ
  AR
  CA
  CO
  CT
  DE
  FL
  GA
  HI
  ID
  IL
  IN
  IA
  KS
  KY
  LA
  ME
  MD
  MA
  MI
  MN
  MS
  MO
  MT
  NE
  NV
  NH
  NJ
  NM
  NY
  NC
  ND
  OH
  OK
  OR
  PA
  RI
  SC
  SD
  TN
  TX
  UT
  VT
  VA
  WA
  WV
  WI
  WY
}

enum ECRelationship {
  Parent
  Child
  Spouse
  Other
}

enum NameSuffix {
  Jr
  Sr
  II
  III
  IV
  MD
  PhD
  Esq
  CPA
  RN
  JD
  DDS
  DVM
  LPN
}

enum Sex {
  Female
  Male
  Intersex
  Unknown
}

enum Gender {
  Man
  Woman
  TransgenderMan
  TransgenderWoman
  NonBinary
  PreferNotToSay
  Unknown
}

enum Race {
  CaucasianOrWhite
  BlackOrAfricanAmerican
  HispanicOrLatino
  Asian
  NativeAmericanOrAlaskaNative
  NativeHawaiianOrOtherPacificIslander
  TwoOrMoreRaces
  OtherRace
}

enum GenderMarker {
  M
  F
  X
}

enum Pronouns {
  HeHimHis       @map("He/Him/His")
  SheHerHers     @map("She/Her/Hers")
  TheyThemTheirs @map("They/Them/Theirs")
  ZeHirHirs      @map("Ze/Hir/Hirs")
}

enum Languages {
  English
  Spanish
  MandarinChinese
  Hindi
  French
  StandardArabic
  Bengali
  Russian
  Portuguese
  Indonesian
}

enum Ethnicity {
  Asian
  BlackAfricanDescent
  HispanicLatino
  CaucasianWhite
  MiddleEastern
  NativeAmerican
  PacificIslander
  SouthAsian
  SoutheastAsian
  MixedRaceEthnicity
}

enum PrimaryHolder {
  Self
  Child
  Spouse
  Other
}

enum PatientStatus {
  Active
  Inactive
  Prospect
  Deceased
}

enum AllergyStatus {
  Active
  Prior
}

enum AllergySeverity {
  Mild
  Moderate
  Severe
}

enum ProblemListStatus {
  Active
  Controlled
  Resolved
}

enum DrugIntoleranceSeverity {
  Mild
  Moderate
  Severe
}

enum DrugIntoleranceStatus {
  Active
  Prior
}

enum DrugType {
  CellularTherapy           @map("Cellular Therapy")
  HumanOtcDrug              @map("Human OTC Drug ")
  HumanPrescriptionDrug     @map("Human Prescription Drug")
  NonStandardizedAllergenic @map("Non Standardzied Allergenic")
  PlasmaDerivative          @map("Plasma Derivative")
  StandardizedAllergenic    @map("Standardized Allergenic")
  Vaccine                   @map("Vaccine")
}

enum PatientEducationLevel {
  NoFormalEducation    @map("No formal education")
  SomePrimaryEducation @map("Some primary education")
  CompletedPrimary     @map("Completed primary")
  SomeSecondary        @map("Some secondary")
  CompletedSecondary   @map("Completed secondary")
  SomeCollege          @map("Some college")
  AssociatesDegree     @map("Associates degree")
  BachelorsDegree      @map("Bachelors degree")
  MastersDegree        @map("Masters degree")
  ProfessionalDegree   @map("Professional degree")
  Doctorate            @map("Doctorate")
}

enum PatientFinancialStrain {
  NoStrain          @map("No strain")
  MinorStrain       @map("Minor strain")
  ModerateStrain    @map("Moderate strain")
  SignificantStrain @map("Significant strain")
}

enum SurveyName {
  HARK   @map("Exposure to Violence - HARK Questionnaire")
  SNI    @map("Social Connection - Social Network Index Questionnaire")
  PHQ2   @map("Depression - PHQ-2 Questionnaire")
  PHQ4   @map("Depression - PHQ-4 Questionnaire")
  PHQ9   @map("Depression - PHQ-9 Questionnaire")
  GAD7   @map("Anxiety - GAD-7 Questionnaire")
  AUDITC @map("Alchol Use - Audit-C")
}

enum PatientStressLevel {
  NoStress          @map("No stress")
  MinorStress       @map("Minor stress")
  ModerateStress    @map("Moderate stress")
  SignificantStress @map("Significant stress")
}

enum PatientSmokingStatus {
  NeverSmoked      @map("Never smoked")
  FormerSmoker     @map("Former smoker")
  OccasionalSmoker @map("Occasional smoker")
  RegularSmoker    @map("Regular smoker")
  HeavySmoker      @map("Heavy smoker")
}

enum SurveyQuestionType {
  Text
  Number
  Boolean
}
