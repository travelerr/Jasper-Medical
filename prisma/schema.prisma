// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Auth

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id          Int       @id @default(autoincrement())
  createdDate DateTime? @default(now())
  updatedDate DateTime? @updatedAt
  name        String?
  username    String
  email       String    @unique
  password    String
  image       String?
  sessions    Session[]
  role        UserRole  @default(PATIENT)
  doctor      Doctor?
  patient     Patient?
  admin       Admin?
  doctorId    Int?
  patientId   Int?
  adminId     Int?
}

// Doctor

model Doctor {
  id           Int           @id @default(autoincrement())
  createdDate  DateTime?     @default(now())
  updatedDate  DateTime?     @updatedAt
  name         String?
  firstName    String?
  lastName     String?
  appointments Appointment[]
  user         User          @relation(fields: [userId], references: [id])
  userId       Int           @unique
  specialty    String
}

// Patient 

model Patient {
  id           Int            @id @default(autoincrement())
  createdDate  DateTime?      @default(now())
  updatedDate  DateTime?      @updatedAt
  name         String?
  firstName    String?
  middleName   String?
  lastName     String?
  status       PatientStatus? @default(Active)
  suffix       NameSuffix?
  altName      String?
  dob          DateTime?
  sexAtBirth   Sex?
  gender       Gender?
  ssn          String?
  maidenName   String?
  genderMarker GenderMarker?
  race         Race?
  ethnicity    Ethnicity?
  contact      Contact?
  insurance    Insurance?
  provider     Provider?
  allergy      Allergy[]
  problemList  ProblemList[]
  appointments Appointment[] // Establish a one-to-many relationship w Consult
  consults     Consult[]
  testResults  TestResult[]
  user         User           @relation(fields: [userId], references: [id])
  userId       Int            @unique
}

model Consult {
  id          Int       @id @default(autoincrement())
  createdDate DateTime? @default(now())
  updatedDate DateTime? @updatedAt
  name        String?
  date        DateTime
  notes       String
  patientId   Int // Foreign key reference to the Patient model
  patient     Patient   @relation(fields: [patientId], references: [id])
}

model TestResult {
  id          Int       @id @default(autoincrement())
  createdDate DateTime? @default(now())
  updatedDate DateTime? @updatedAt
  name        String?
  date        DateTime
  notes       String
  patientId   Int // Foreign key reference to the Patient model
  patient     Patient   @relation(fields: [patientId], references: [id])
}

model Contact {
  id                Int             @id @default(autoincrement())
  createdDate       DateTime?       @default(now())
  updatedDate       DateTime?       @updatedAt
  name              String?
  primaryPhone      String?
  primaryType       PhoneType?      @default(MOBILE)
  secondaryPhone    String?
  secondaryType     PhoneType?      @default(HOME)
  street            String?
  apt               String?
  city              String?
  state             State?
  zip               String?
  pharmacy          String?
  secondaryPharmacy String?
  secondaryStreet   String?
  secondaryApt      String?
  secondaryCity     String?
  secondaryState    State?
  secondaryZip      String?
  ecFirstName       String?
  ecLastName        String?
  ecRelationship    ECRelationship?
  ecPhone           String?
  ecStreet          String?
  ecApt             String?
  ecCity            String?
  ecState           State?
  ecZip             String?
  patientId         Int             @unique // Foreign key reference to the Patient model
  patient           Patient         @relation(fields: [patientId], references: [id])
}

model Insurance {
  id                      Int            @id @default(autoincrement())
  createdDate             DateTime?      @default(now())
  updatedDate             DateTime?      @updatedAt
  name                    String?
  cardImageFront          String?
  cardImageBack           String?
  insuanceName            String?
  planName                String?
  groupId                 String?
  memberId                String?
  copay                   Decimal?
  deductible              Decimal?
  effectiveDate           DateTime?
  endDate                 DateTime?
  primaryHolder           PrimaryHolder? @default(Self)
  secondaryCardImageFront String?
  secondaryCardImageBack  String?
  secondaryInsuanceName   String?
  secondaryPlanName       String?
  secondaryGroupId        String?
  secondaryMemberId       String?
  secondaryCopay          Decimal?
  secondaryDeductible     Decimal?
  secondaryEffectiveDate  DateTime?
  secondaryEndDate        DateTime?
  secondaryPrimaryHolder  PrimaryHolder? @default(Self)
  tertiaryCardImageFront  String?
  tertiaryCardImageBack   String?
  tertiaryInsuanceName    String?
  tertiaryPlanName        String?
  tertiaryGroupId         String?
  tertiaryMemberId        String?
  tertiaryCopay           Decimal?
  tertiaryDeductible      Decimal?
  tertiaryEffectiveDate   DateTime?
  tertiaryEndDate         DateTime?
  tertiaryPrimaryHolder   PrimaryHolder? @default(Self)
  patientId               Int            @unique // Foreign key reference to the Patient model
  patient                 Patient        @relation(fields: [patientId], references: [id])
}

model Provider {
  id          Int       @id @default(autoincrement())
  createdDate DateTime? @default(now())
  updatedDate DateTime? @updatedAt
  name        String?
  provider    String?
  pcp         String?
  state       State?
  patientId   Int       @unique // Foreign key reference to the Patient model
  patient     Patient   @relation(fields: [patientId], references: [id])
}

model Allergy {
  id          Int             @id @default(autoincrement())
  createdDate DateTime?       @default(now())
  updatedDate DateTime?       @updatedAt
  name        String?
  reaction    String?
  severity    AllergySeverity
  status      AlleryStatus
  onsetDate   DateTime
  allergen    Allergen[]
  patientId   Int // Foreign key reference to the Patient model
  patient     Patient         @relation(fields: [patientId], references: [id])
}

model Allergen {
  id          Int       @id @default(autoincrement())
  createdDate DateTime? @default(now())
  updatedDate DateTime? @updatedAt
  name        String?
  allergyId   Int // Foreign key reference to the Patient model
  allergy     Allergy   @relation(fields: [allergyId], references: [id])
}

model ProblemList {
  id          Int                    @id @default(autoincrement())
  createdDate DateTime?              @default(now())
  updatedDate DateTime?              @updatedAt
  name        String?
  dxDate      DateTime?
  status      ProblemListStatus      @default(Active)
  synopsis    String?
  patientId   Int // Foreign key reference to the Patient model
  patient     Patient                @relation(fields: [patientId], references: [id])
  icd10Codes  ProblemListICD10Code[]
}

model ICD10Code {
  id               Int                    @id @default(autoincrement())
  createdDate      DateTime?              @default(now())
  updatedDate      DateTime?              @updatedAt
  name             String?
  code             String
  shortDescription String?
  longDescription  String?
  problemLists     ProblemListICD10Code[]
}

model ProblemListICD10Code {
  problemListId Int
  icd10CodeId   Int

  problemList ProblemList @relation(fields: [problemListId], references: [id])
  icd10Code   ICD10Code   @relation(fields: [icd10CodeId], references: [id])

  @@id([problemListId, icd10CodeId])
}

// Admin

model Admin {
  id          Int      @id @default(autoincrement())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  name        String?
  firstName   String?
  lastName    String?
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @unique
}

// Shared
model Appointment {
  id          Int               @id @default(autoincrement())
  createdDate DateTime?         @default(now())
  updatedDate DateTime?         @updatedAt
  name        String?
  title       String?
  startTime   DateTime
  endTime     DateTime
  details     String
  status      AppointmentStatus
  doctorId    Int
  patientId   Int
  doctor      Doctor            @relation(fields: [doctorId], references: [id])
  patient     Patient           @relation(fields: [patientId], references: [id])
}

enum AppointmentStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum UserRole {
  DOCTOR
  PATIENT
  ADMIN
}

enum PhoneType {
  HOME
  MOBILE
  WORK
  OTHER
}

enum State {
  AL
  AK
  AZ
  AR
  CA
  CO
  CT
  DE
  FL
  GA
  HI
  ID
  IL
  IN
  IA
  KS
  KY
  LA
  ME
  MD
  MA
  MI
  MN
  MS
  MO
  MT
  NE
  NV
  NH
  NJ
  NM
  NY
  NC
  ND
  OH
  OK
  OR
  PA
  RI
  SC
  SD
  TN
  TX
  UT
  VT
  VA
  WA
  WV
  WI
  WY
}

enum ECRelationship {
  Parent
  Child
  Spouse
  Other
}

enum NameSuffix {
  Jr
  Sr
  II
  III
  IV
  MD
  PhD
  Esq
  CPA
  RN
  JD
  DDS
  DVM
  LPN
}

enum Sex {
  Female
  Male
  Intersex
  Unknown
}

enum Gender {
  Man
  Woman
  TransgenderMan
  TransgenderWoman
  NonBinary
  PreferNotToSay
  Unknown
}

enum Race {
  CaucasianOrWhite
  BlackOrAfricanAmerican
  HispanicOrLatino
  Asian
  NativeAmericanOrAlaskaNative
  NativeHawaiianOrOtherPacificIslander
  TwoOrMoreRaces
  OtherRace
}

enum GenderMarker {
  M
  F
  X
}

enum Languages {
  English
  Spanish
  MandarinChinese
  Hindi
  French
  StandardArabic
  Bengali
  Russian
  Portuguese
  Indonesian
}

enum Ethnicity {
  Asian
  BlackAfricanDescent
  HispanicLatino
  CaucasianWhite
  MiddleEastern
  NativeAmerican
  PacificIslander
  SouthAsian
  SoutheastAsian
  MixedRaceEthnicity
}

enum PrimaryHolder {
  Self
  Child
  Spouse
  Other
}

enum PatientStatus {
  Active
  Inactive
  Prospect
  Deceased
}

enum AlleryStatus {
  Active
  Prior
}

enum AllergySeverity {
  Mild
  Moderate
  Severe
}

enum ProblemListStatus {
  Active
  Controlled
  Resolved
}
