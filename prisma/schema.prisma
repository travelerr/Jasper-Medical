// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Auth

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id          Int       @id @default(autoincrement())
  createdDate DateTime? @default(now())
  updatedDate DateTime? @updatedAt
  name        String?
  username    String
  email       String    @unique
  password    String
  image       String?
  sessions    Session[]
  role        UserRole  @default(PATIENT)
  doctor      Doctor?
  patient     Patient?
  admin       Admin?
  doctorId    Int?
  patientId   Int?
  adminId     Int?
}

enum UserRole {
  DOCTOR
  PATIENT
  ADMIN
}

// Doctor

model Doctor {
  id           Int           @id @default(autoincrement())
  createdDate  DateTime?     @default(now())
  updatedDate  DateTime?     @updatedAt
  name         String?
  firstName    String?
  lastName     String?
  appointments Appointment[]
  user         User          @relation(fields: [userId], references: [id])
  userId       Int           @unique
  specialty    String
}

// Patient 

model Patient {
  id           Int           @id @default(autoincrement())
  createdDate  DateTime?     @default(now())
  updatedDate  DateTime?     @updatedAt
  name         String?
  firstName    String?
  lastName     String?
  appointments Appointment[]
  user         User          @relation(fields: [userId], references: [id])
  userId       Int           @unique
  consults     Consult[] // Establish a one-to-many relationship with Consult
  testResults  TestResult[]
}

model Consult {
  id          Int       @id @default(autoincrement())
  createdDate DateTime? @default(now())
  updatedDate DateTime? @updatedAt
  name        String?
  date        DateTime
  notes       String
  patientId   Int // Foreign key reference to the Patient model
  patient     Patient   @relation(fields: [patientId], references: [id])
}

model TestResult {
  id          Int       @id @default(autoincrement())
  createdDate DateTime? @default(now())
  updatedDate DateTime? @updatedAt
  name        String?
  date        DateTime
  notes       String
  patientId   Int // Foreign key reference to the Patient model
  patient     Patient   @relation(fields: [patientId], references: [id])
}

// Admin

model Admin {
  id          Int      @id @default(autoincrement())
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  name        String?
  firstName   String?
  lastName    String?
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @unique
}

// Shared
model Appointment {
  id          Int               @id @default(autoincrement())
  createdDate DateTime?         @default(now())
  updatedDate DateTime?         @updatedAt
  name        String?
  title       String?
  startTime   DateTime
  endTime     DateTime
  details     String
  status      AppointmentStatus
  doctorId    Int
  patientId   Int
  doctor      Doctor            @relation(fields: [doctorId], references: [id])
  patient     Patient           @relation(fields: [patientId], references: [id])
}

enum AppointmentStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
}
